#! /bin/sh

function seconds_to_time_str {
  local secs="$1"
  printf "%dh %dm %ds" $((${secs}/3600)) $((${secs}%3600/60)) $((${secs}%60)) | grep -o "[1-9].*$"
}

function seconds_to_minutes {
  local secs="$1"
  echo "$((${secs}/60))"
}

# Colour Vars
bold="$(tput bold)"
reset="\001$(tput sgr0)\002"

blue="\001$bold$(tput setaf 4)\002"
cyan="\001$bold$(tput setaf 6)\002"
green="\001$bold$(tput setaf 2)\002"
purple="\001$bold$(tput setaf 5)\002"
red="\001$bold$(tput setaf 1)\002"
white="\001$bold$(tput setaf 7)\002"
yellow="\001$bold$(tput setaf 3)\002"

# Prompt Colour Functions
function user_colour {
  local colour=$green
  if [[ $(id -u) == 0 ]]; then
    colour=$red
  fi
  echo $colour
}

function colour_for_minutes {
  local minutes="$1"
  local colour=$green
  if [[ $minutes -gt 30 ]]; then colour=$red
    elif [[ $minutes -gt 15 ]]; then colour=$yellow
  fi
  echo -e "$colour"
}

# Git Prompt Niceness
function git_working_changed {
  git diff --quiet 2> /dev/null
  if [[ $? == 0 ]]; then return 1; else return 0; fi
}

function git_staging_changed {
  git diff --cached --quiet 2> /dev/null
  if [[ $? == 0 ]]; then return 1; else return 0; fi
}

function git_changed {
  $(git_working_changed) || $(git_staging_changed)
}

function git_branch {
  echo "$(__git_ps1 "%s")"
}

function git_seconds_since_commit {
  now=`date +%s`
  local last_commit=`git log --pretty=format:'%at' -1`
  local seconds=$((now-last_commit))
  echo $seconds
}

function git_mins_since_commit {
  echo "$(seconds_to_minutes $(git_seconds_since_commit))"
}

function git_branch_colour {
  local colour=$blue
  if $(git_changed) ; then
    local minutes_since_commit="$(git_mins_since_commit)"
    colour=$(colour_for_minutes $minutes_since_commit)
  fi
  echo -e $colour
}

git_prompt() {
  if [ -n "$(__gitdir)" ]; then
    echo -e "$(git_branch_colour)($(git_branch))"
  fi
}

# Setup iTerm2 tab names
export PROMPT_COMMAND='echo -ne "\\033]0;$(basename ${PWD/#$HOME/~})\\007"'

# Force term type to stop all the stupidity in vim, tmux et. al. Not a good idea but fixes too many things not to do it for now.
export TERM=xterm-256color

# Get CLI file colors back in OS X
export CLICOLOR=1

# Setup Prompt
export PS2="-> "
export PS1="$(user_colour)\u$reset@$yellow\h$reset:$purple\W$reset\$(git_prompt)$reset$PS2"

# keep history up to date, across sessions, in realtime
#  http://unix.stackexchange.com/a/48113
export HISTCONTROL="erasedups:ignoreboth"       # no duplicate entries
export HISTSIZE=100000                          # big big history (default is 500)
export HISTFILESIZE=$HISTSIZE                   # big big history
type shopt &> /dev/null && shopt -s histappend  # append to history, don't overwrite it

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Save multi-line commands as one command
shopt -s cmdhist

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# Git 'g' alias auto-completion fixes
bashdefault -o default -o nospace -F _git g 2>/dev/null || complete -o default -o nospace -F _git g
__git_complete g __git_main

# Enable bash completions
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

# Source python virtual envs if available
[ -f .venv/bin/activate ] && source .venv/bin/activate

if [ -n "${GHOSTTY_RESOURCES_DIR}" ]; then
    builtin source "${GHOSTTY_RESOURCES_DIR}/shell-integration/bash/ghostty.bash"
fi

eval "$(pyenv init - bash)"
